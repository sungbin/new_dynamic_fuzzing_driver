#!/usr/bin/env python3
import subprocess
import os
import sys
import shutil

def get_parent_dir():
    return 'new_c-blosc2'

if __name__ == '__main__':
    if len(sys.argv) != 3:
        print("./order_api_seq INPUT_DIR(reproducible bytes) OUTPUT_DIR");
        sys.exit()

    TARGET_DIR = sys.argv[1] if sys.argv[1][-1] == '/' else sys.argv[1] + '/'
    assert os.path.isdir(TARGET_DIR), 'Wrong INPUT DIRECTORY'
    OUTPUT_DIR = sys.argv[2] if sys.argv[2][-1] == '/' else sys.argv[2] + '/'
    assert not(os.path.exists(OUTPUT_DIR)), 'Already OUTPUT DIRECTORY exists'
    os.mkdir(OUTPUT_DIR)

    project = get_parent_dir()
    subprocess.run(['rm', '-f', '*.json', 'fuzz_exec', 'fuzz_write', 'crash-*', 'leak-*'])
    subprocess.run(['docker', 'run', '-t', '-d', '--name', f'{project}', '-v', '.:/tmp', f'sb_{project}', '/bin/bash'])

    BYTE_FILES = os.listdir(TARGET_DIR)
    for BYTE_FILE in BYTE_FILES:
        BYTE_PATH = TARGET_DIR + BYTE_FILE
        subprocess.run(['docker', 'exec', '-w', '/new_fuzzing_driver/c-blosc2/build', f'{project}', 'sh', '-c', f'./run_on_debug_mode.sh /tmp/{BYTE_PATH} /tmp/{OUTPUT_DIR}{BYTE_FILE}.log'])

    subprocess.run(['docker', 'kill', f'{project}'])
    subprocess.run(['docker', 'rm', f'{project}'])

